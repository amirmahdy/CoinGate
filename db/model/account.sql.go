// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  username, balance, coin
) VALUES (
  $1, $2, $3
)
RETURNING id, username, balance, coin, created_at
`

type CreateAccountParams struct {
	Username string `json:"username"`
	Balance  int64  `json:"balance"`
	Coin     string `json:"coin"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.queryRow(ctx, q.createAccountStmt, createAccount, arg.Username, arg.Balance, arg.Coin)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.Coin,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, balance, coin, created_at FROM accounts
WHERE username LIKE $1 LIMIT 10
`

func (q *Queries) GetAccount(ctx context.Context, username string) (Account, error) {
	row := q.queryRow(ctx, q.getAccountStmt, getAccount, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.Coin,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts SET
  balance = balance + $2
WHERE id = $1
RETURNING id, username, balance, coin, created_at
`

type UpdateAccountParams struct {
	ID     int64 `json:"id"`
	Amount int64 `json:"amount"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.queryRow(ctx, q.updateAccountStmt, updateAccount, arg.ID, arg.Amount)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.Coin,
		&i.CreatedAt,
	)
	return i, err
}
