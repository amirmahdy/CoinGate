// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: coin.sql

package db

import (
	"context"
)

const createCoin = `-- name: CreateCoin :one
INSERT INTO coin (
  name
) VALUES (
  $1
)
RETURNING name, created_at
`

func (q *Queries) CreateCoin(ctx context.Context, name string) (Coin, error) {
	row := q.queryRow(ctx, q.createCoinStmt, createCoin, name)
	var i Coin
	err := row.Scan(&i.Name, &i.CreatedAt)
	return i, err
}

const getCoin = `-- name: GetCoin :many
SELECT name, created_at FROM coin
WHERE name LIKE $1 
LIMIT 10
`

func (q *Queries) GetCoin(ctx context.Context, name string) ([]Coin, error) {
	rows, err := q.query(ctx, q.getCoinStmt, getCoin, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Coin{}
	for rows.Next() {
		var i Coin
		if err := rows.Scan(&i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
